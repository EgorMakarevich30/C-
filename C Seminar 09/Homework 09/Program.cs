// Урок 9. Рекурсия
// ================================================================
// Задача 64: Задайте значение N. Напишите программу, которая выведет 
// все натуральные числа в промежутке от N до 1. Выполнить с помощью рекурсии.
// N = 5 -> "5, 4, 3, 2, 1"
// N = 8 -> "8, 7, 6, 5, 4, 3, 2, 1"
// ----------------------------------------------------------------

// void ShowNumbersFromNToOne(int n)
// {
//     if (n >= 1)
//     {
//         Console.Write($"{n}, ");
//         ShowNumbersFromNToOne(n - 1);
//     }
// }

// int number = 8;

// ShowNumbersFromNToOne(number);

// ================================================================
// Задача 66: Задайте значения M и N. Напишите программу, которая найдёт сумму
//  натуральных элементов в промежутке от M до N.
// M = 1; N = 15 -> 120
// M = 4; N = 8. -> 30
// ----------------------------------------------------------------

// int SumNumbersFromMToN(int m, int n)
// {
//     int sum = m;
//     if (m != n)
//     {
//         if (n > m)
//         {
//             sum = n + SumNumbersFromMToN(m, n - 1);
//         }
//         if (m > n)
//         {
//             sum = m + SumNumbersFromMToN(m - 1, n);
//         }
//     }
//     return sum;
// }

// int numberM = 8;
// int numberN = 4;

// if (numberM == numberN)
// {
//     Console.WriteLine("0");
// }
// else
// {
//     Console.WriteLine(SumNumbersFromMToN(numberM, numberN));
// }

// ================================================================
// Задача 68: Напишите программу вычисления функции Аккермана с помощью рекурсии.
// Даны два неотрицательных числа m и n.
// m = 2, n = 3 -> A(m,n) = 9
// m = 3, n = 2 -> A(m,n) = 29
// ----------------------------------------------------------------

// int Akkerman(int m, int n)
// {
//     if (m == 0) return n + 1;
//     else if (m > 0 && n == 0) return Akkerman(m - 1, 1);
//     else return Akkerman(m - 1, Akkerman(m, n - 1));
// }

// Console.WriteLine(Akkerman(3, 2));